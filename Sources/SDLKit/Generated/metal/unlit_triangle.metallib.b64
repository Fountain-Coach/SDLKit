Ly8gZmFrZSBtZXRhbGxpYiBwbGFjZWhvbGRlcgovLyBmYWtlIG1ldGFsIEFJUiBwbGFjZWhvbGRl
cgojaW5jbHVkZSA8bWV0YWxfc3RkbGliPgojaW5jbHVkZSA8c2ltZC9zaW1kLmg+Cgp1c2luZyBu
YW1lc3BhY2UgbWV0YWw7CgpzdHJ1Y3QgdHlwZV9Db25zdGFudEJ1ZmZlcl9TY2VuZUNvbnN0YW50
cwp7CiAgICBmbG9hdDR4NCB1TVZQOwogICAgZmxvYXQ0IGxpZ2h0RGlyOwogICAgZmxvYXQ0IGJh
c2VDb2xvcjsKfTsKCnN0cnVjdCB1bmxpdF90cmlhbmdsZV92c19vdXQKewogICAgZmxvYXQzIG91
dF92YXJfQ09MT1IgW1t1c2VyKGxvY24wKV1dOwogICAgZmxvYXQ0IGdsX1Bvc2l0aW9uIFtbcG9z
aXRpb25dXTsKfTsKCnN0cnVjdCB1bmxpdF90cmlhbmdsZV92c19pbgp7CiAgICBmbG9hdDMgaW5f
dmFyX1BPU0lUSU9OIFtbYXR0cmlidXRlKDApXV07CiAgICBmbG9hdDMgaW5fdmFyX0NPTE9SIFtb
YXR0cmlidXRlKDEpXV07Cn07Cgp2ZXJ0ZXggdW5saXRfdHJpYW5nbGVfdnNfb3V0IHVubGl0X3Ry
aWFuZ2xlX3ZzKHVubGl0X3RyaWFuZ2xlX3ZzX2luIGluIFtbc3RhZ2VfaW5dXSwgY29uc3RhbnQg
dHlwZV9Db25zdGFudEJ1ZmZlcl9TY2VuZUNvbnN0YW50cyYgU2NlbmVDQiBbW2J1ZmZlcigwKV1d
KQp7CiAgICB1bmxpdF90cmlhbmdsZV92c19vdXQgb3V0ID0ge307CiAgICBvdXQuZ2xfUG9zaXRp
b24gPSBmbG9hdDQoaW4uaW5fdmFyX1BPU0lUSU9OLCAxLjApICogU2NlbmVDQi51TVZQOwogICAg
b3V0Lm91dF92YXJfQ09MT1IgPSBpbi5pbl92YXJfQ09MT1I7CiAgICByZXR1cm4gb3V0Owp9CgoK
CgpzdHJ1Y3QgdHlwZV9Db25zdGFudEJ1ZmZlcl9TY2VuZUNvbnN0YW50cwp7CiAgICBmbG9hdDR4
NCB1TVZQOwogICAgZmxvYXQ0IGxpZ2h0RGlyOwogICAgZmxvYXQ0IGJhc2VDb2xvcjsKfTsKCnN0
cnVjdCB1bmxpdF90cmlhbmdsZV9wc19vdXQKewogICAgZmxvYXQ0IG91dF92YXJfU1ZfVGFyZ2V0
IFtbY29sb3IoMCldXTsKfTsKCnN0cnVjdCB1bmxpdF90cmlhbmdsZV9wc19pbgp7CiAgICBmbG9h
dDMgaW5fdmFyX0NPTE9SIFtbdXNlcihsb2NuMCldXTsKfTsKCmZyYWdtZW50IHVubGl0X3RyaWFu
Z2xlX3BzX291dCB1bmxpdF90cmlhbmdsZV9wcyh1bmxpdF90cmlhbmdsZV9wc19pbiBpbiBbW3N0
YWdlX2luXV0sIGNvbnN0YW50IHR5cGVfQ29uc3RhbnRCdWZmZXJfU2NlbmVDb25zdGFudHMmIFNj
ZW5lQ0IgW1tidWZmZXIoMCldXSkKewogICAgdW5saXRfdHJpYW5nbGVfcHNfb3V0IG91dCA9IHt9
OwogICAgb3V0Lm91dF92YXJfU1ZfVGFyZ2V0ID0gZmxvYXQ0KGluLmluX3Zhcl9DT0xPUiAqIFNj
ZW5lQ0IuYmFzZUNvbG9yLnh5eiwgMS4wKTsKICAgIHJldHVybiBvdXQ7Cn0K
