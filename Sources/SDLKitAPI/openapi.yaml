openapi: 3.1.0
info:
  title: SDLKit API
  version: 0.1.0
  description: |-
    SDLKit JSON control API. Endpoints are POST unless otherwise noted.
    In headless builds, GUI/Audio/MIDI endpoints return not_implemented.
    This spec is the source of truth for the SDLKit JSON router and generated clients/servers.
servers:
  - url: http://127.0.0.1:8723
tags:
  - name: window
  - name: render
  - name: texture
  - name: screenshot
  - name: input
  - name: clipboard
  - name: display
  - name: audio
  - name: midi
  - name: health
components:
  schemas:
    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string }
        message: { type: string }
        details: { description: Optional details, nullable: true }
    Ok:
      type: object
      properties:
        ok: { type: boolean, default: true }
    WindowId:
      type: object
      required: [window_id]
      properties:
        window_id: { type: integer, format: int32 }
    TextureId:
      type: object
      required: [window_id,id]
      properties:
        window_id: { type: integer, format: int32 }
        id: { type: string }
    Color:
      description: ARGB as 0xAARRGGBB integer or #RRGGBB string
      oneOf:
        - type: integer
          format: int64
        - type: string
    Rect:
      type: object
      required: [x,y,width,height]
      properties:
        x: { type: integer }
        y: { type: integer }
        width: { type: integer }
        height: { type: integer }
    Point:
      type: object
      required: [x,y]
      properties:
        x: { type: integer }
        y: { type: integer }
    RawScreenshot:
      type: object
      required: [raw_base64,width,height,pitch,format]
      properties:
        raw_base64: { type: string, format: byte }
        width: { type: integer }
        height: { type: integer }
        pitch: { type: integer }
        format: { type: string, enum: [ABGR8888] }
    PNGScreenshot:
      type: object
      required: [png_base64,width,height,format]
      properties:
        png_base64: { type: string, format: byte }
        width: { type: integer }
        height: { type: integer }
        format: { type: string, enum: [PNG] }
paths:
  /agent/gui/window/open:
    post:
      tags: [window]
      operationId: openWindow
      summary: Open a new window
      description: Creates a window and returns its id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title,width,height]
              properties:
                title: { type: string }
                width: { type: integer }
                height: { type: integer }
      responses:
        "200":
          description: Opened
          content:
            application/json:
              schema: { $ref: '#/components/schemas/WindowId' }
        "501": { description: Not implemented in headless, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /agent/gui/window/close:
    post:
      tags: [window]
      operationId: closeWindow
      summary: Close an open window
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowId' }
      responses:
        "200": { description: Closed, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/show:
    post:
      tags: [window]
      operationId: showWindow
      summary: Show a window
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowId' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/hide:
    post:
      tags: [window]
      operationId: hideWindow
      summary: Hide a window
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowId' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/resize:
    post:
      tags: [window]
      operationId: resizeWindow
      summary: Resize a window
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - type: object
                  required: [width,height]
                  properties:
                    width: { type: integer }
                    height: { type: integer }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/getInfo:
    post:
      tags: [window]
      operationId: getWindowInfo
      summary: Get window info
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowId' }
      responses:
        "200":
          description: Info
          content:
            application/json:
              schema:
                type: object
                required: [x,y,width,height,title]
                properties:
                  x: { type: integer }
                  y: { type: integer }
                  width: { type: integer }
                  height: { type: integer }
                  title: { type: string }
  /agent/gui/window/setTitle:
    post:
      tags: [window]
      operationId: setWindowTitle
      summary: Set window title
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - type: object
                  required: [title]
                  properties:
                    title: { type: string }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/setPosition:
    post:
      tags: [window]
      operationId: setWindowPosition
      summary: Set window position
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - $ref: '#/components/schemas/Point'
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/maximize:
    post:
      tags: [window]
      operationId: maximizeWindow
      summary: Maximize window
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowId' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/minimize:
    post:
      tags: [window]
      operationId: minimizeWindow
      summary: Minimize window
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowId' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/restore:
    post:
      tags: [window]
      operationId: restoreWindow
      summary: Restore window
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowId' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/center:
    post:
      tags: [window]
      operationId: centerWindow
      summary: Center window on screen
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowId' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/setFullscreen:
    post:
      tags: [window]
      operationId: setWindowFullscreen
      summary: Toggle fullscreen
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - type: object
                  required: [enabled]
                  properties:
                    enabled: { type: boolean }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/setOpacity:
    post:
      tags: [window]
      operationId: setWindowOpacity
      summary: Set window opacity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - type: object
                  required: [opacity]
                  properties:
                    opacity: { type: number, format: float }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/window/setAlwaysOnTop:
    post:
      tags: [window]
      operationId: setWindowAlwaysOnTop
      summary: Toggle always-on-top
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - type: object
                  required: [enabled]
                  properties:
                    enabled: { type: boolean }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }

  /agent/gui/clear:
    post:
      tags: [render]
      operationId: clear
      summary: Clear render target with a color
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - type: object
                  required: [color]
                  properties:
                    color: { $ref: '#/components/schemas/Color' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/drawRectangle:
    post:
      tags: [render]
      operationId: drawRectangle
      summary: Draw filled rectangle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - $ref: '#/components/schemas/Rect'
                - type: object
                  required: [color]
                  properties:
                    color: { $ref: '#/components/schemas/Color' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/drawLine:
    post:
      tags: [render]
      operationId: drawLine
      summary: Draw a line using 1px rect plotting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - type: object
                  required: [x1,y1,x2,y2,color]
                  properties:
                    x1: { type: integer }
                    y1: { type: integer }
                    x2: { type: integer }
                    y2: { type: integer }
                    color: { $ref: '#/components/schemas/Color' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/drawCircleFilled:
    post:
      tags: [render]
      operationId: drawCircleFilled
      summary: Draw a filled circle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - type: object
                  required: [cx,cy,radius,color]
                  properties:
                    cx: { type: integer }
                    cy: { type: integer }
                    radius: { type: integer }
                    color: { $ref: '#/components/schemas/Color' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/present:
    post:
      tags: [render]
      operationId: present
      summary: Present the backbuffer
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowId' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/drawText:
    post:
      tags: [render]
      operationId: drawText
      summary: Draw text using sdl3_ttf if available
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - type: object
                  required: [x,y,color,font_path,size,text]
                  properties:
                    x: { type: integer }
                    y: { type: integer }
                    color: { $ref: '#/components/schemas/Color' }
                    font_path: { type: string }
                    size: { type: integer }
                    text: { type: string }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
        "501": { description: Not implemented if ttf missing, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /agent/gui/screenshot/capture:
    post:
      tags: [screenshot]
      operationId: captureScreenshot
      summary: Capture raw or PNG screenshot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WindowId'
                - type: object
                  properties:
                    format: { type: string, enum: [raw,png], default: raw }
      responses:
        "200":
          description: Screenshot data
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RawScreenshot'
                  - $ref: '#/components/schemas/PNGScreenshot'
        "501": { description: Not implemented if image support missing, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /agent/gui/captureEvent:
    post:
      tags: [input]
      operationId: captureEvent
      summary: Poll for the next event, with optional timeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                timeout_ms: { type: integer, nullable: true }
      responses:
        "200": { description: Event, content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } }

  /agent/gui/clipboard/get:
    post:
      tags: [clipboard]
      operationId: clipboardGet
      summary: Get clipboard text
      requestBody:
        required: false
      responses:
        "200": { description: Text, content: { application/json: { schema: { type: object, properties: { text: { type: string } } } } } }
  /agent/gui/clipboard/set:
    post:
      tags: [clipboard]
      operationId: clipboardSet
      summary: Set clipboard text
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, required: [text], properties: { text: { type: string } } }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }

  /agent/gui/input/getKeyboardState:
    post:
      tags: [input]
      operationId: getKeyboardState
      summary: Get keyboard modifier state
      responses:
        "200": { description: State, content: { application/json: { schema: { $ref: '#/components/schemas/KeyboardState' } } } }
  /agent/gui/input/getMouseState:
    post:
      tags: [input]
      operationId: getMouseState
      summary: Get mouse position and buttons
      responses:
        "200": { description: State, content: { application/json: { schema: { $ref: '#/components/schemas/MouseState' } } } }

  /agent/gui/display/list:
    post:
      tags: [display]
      operationId: listDisplays
      summary: List display indices
      responses:
        "200": { description: Indices, content: { application/json: { schema: { type: object, properties: { displays: { type: array, items: { type: integer } } } } } } }
  /agent/gui/display/getInfo:
    post:
      tags: [display]
      operationId: getDisplayInfo
      summary: Get display info by index
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, required: [index], properties: { index: { type: integer } } }
      responses:
        "200": { description: Info, content: { application/json: { schema: { $ref: '#/components/schemas/DisplayInfo' } } } }

  /agent/gui/texture/load:
    post:
      tags: [texture]
      operationId: textureLoad
      summary: Load a texture by id
      requestBody:
        required: true
        content:
          application/json:
            schema: { allOf: [ { $ref: '#/components/schemas/WindowId' }, { type: object, required: [id,path], properties: { id: { type: string }, path: { type: string } } } ] }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/texture/draw:
    post:
      tags: [texture]
      operationId: textureDraw
      summary: Draw a texture
      requestBody:
        required: true
        content:
          application/json:
            schema: { allOf: [ { $ref: '#/components/schemas/TextureId' }, { type: object, required: [x,y], properties: { x: { type: integer }, y: { type: integer }, width: { type: integer, nullable: true }, height: { type: integer, nullable: true } } } ] }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/texture/drawTiled:
    post:
      tags: [texture]
      operationId: textureDrawTiled
      summary: Draw a tiled texture
      requestBody:
        required: true
        content:
          application/json:
            schema: { allOf: [ { $ref: '#/components/schemas/TextureId' }, { type: object, required: [x,y,width,height,tile_w,tile_h], properties: { x: { type: integer }, y: { type: integer }, width: { type: integer }, height: { type: integer }, tile_w: { type: integer }, tile_h: { type: integer } } } ] }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/texture/drawRotated:
    post:
      tags: [texture]
      operationId: textureDrawRotated
      summary: Draw a rotated texture
      requestBody:
        required: true
        content:
          application/json:
            schema: { allOf: [ { $ref: '#/components/schemas/TextureId' }, { type: object, required: [x,y,angle_degrees], properties: { x: { type: integer }, y: { type: integer }, width: { type: integer, nullable: true }, height: { type: integer, nullable: true }, angle_degrees: { type: number, format: double }, center_x: { type: number, format: float, nullable: true }, center_y: { type: number, format: float, nullable: true } } } ] }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/texture/free:
    post:
      tags: [texture]
      operationId: textureFree
      summary: Free a texture
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TextureId' }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }

  /agent/gui/render/getOutputSize:
    post:
      tags: [render]
      operationId: renderGetOutputSize
      summary: Query render output size
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/WindowId' } } }
      responses:
        "200": { description: Size, content: { application/json: { schema: { type: object, properties: { width: { type: integer }, height: { type: integer } } } } } }
  /agent/gui/render/getScale:
    post:
      tags: [render]
      operationId: renderGetScale
      summary: Get render scale
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/WindowId' } } }
      responses:
        "200": { description: Scale, content: { application/json: { schema: { type: object, properties: { sx: { type: number, format: float }, sy: { type: number, format: float } } } } } }
  /agent/gui/render/setScale:
    post:
      tags: [render]
      operationId: renderSetScale
      summary: Set render scale
      requestBody:
        required: true
        content: { application/json: { schema: { allOf: [ { $ref: '#/components/schemas/WindowId' }, { type: object, required: [sx,sy], properties: { sx: { type: number, format: float }, sy: { type: number, format: float } } } ] } } }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/render/getDrawColor:
    post:
      tags: [render]
      operationId: renderGetDrawColor
      summary: Get current draw color
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/WindowId' } } }
      responses:
        "200": { description: Color, content: { application/json: { schema: { type: object, properties: { color: { $ref: '#/components/schemas/Color' } } } } } }
  /agent/gui/render/setDrawColor:
    post:
      tags: [render]
      operationId: renderSetDrawColor
      summary: Set draw color
      requestBody:
        required: true
        content: { application/json: { schema: { allOf: [ { $ref: '#/components/schemas/WindowId' }, { type: object, required: [color], properties: { color: { $ref: '#/components/schemas/Color' } } } ] } } }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/render/getViewport:
    post:
      tags: [render]
      operationId: renderGetViewport
      summary: Get viewport
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/WindowId' } } }
      responses:
        "200": { description: Viewport, content: { application/json: { schema: { $ref: '#/components/schemas/Rect' } } } }
  /agent/gui/render/setViewport:
    post:
      tags: [render]
      operationId: renderSetViewport
      summary: Set viewport
      requestBody:
        required: true
        content: { application/json: { schema: { allOf: [ { $ref: '#/components/schemas/WindowId' }, { $ref: '#/components/schemas/Rect' } ] } } }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/render/getClipRect:
    post:
      tags: [render]
      operationId: renderGetClipRect
      summary: Get clip rect
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/WindowId' } } }
      responses:
        "200": { description: Clip, content: { application/json: { schema: { $ref: '#/components/schemas/Rect' } } } }
  /agent/gui/render/setClipRect:
    post:
      tags: [render]
      operationId: renderSetClipRect
      summary: Set clip rect
      requestBody:
        required: true
        content: { application/json: { schema: { allOf: [ { $ref: '#/components/schemas/WindowId' }, { $ref: '#/components/schemas/Rect' } ] } } }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /agent/gui/render/disableClipRect:
    post:
      tags: [render]
      operationId: renderDisableClipRect
      summary: Disable clip rect
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/WindowId' } } } }
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }

  /agent/gui/drawPoints:
    post:
      tags: [render]
      operationId: drawPoints
      summary: Draw multiple points
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [window_id, points, color], properties: { window_id: { type: integer }, points: { type: array, items: { $ref: '#/components/schemas/Point' } }, color: { $ref: '#/components/schemas/Color' } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }
  /agent/gui/drawLines:
    post:
      tags: [render]
      operationId: drawLines
      summary: Draw multiple lines
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [window_id, lines, color], properties: { window_id: { type: integer }, lines: { type: array, items: { type: object, required: [x1,y1,x2,y2], properties: { x1: { type: integer }, y1: { type: integer }, x2: { type: integer }, y2: { type: integer } } } }, color: { $ref: '#/components/schemas/Color' } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }
  /agent/gui/drawRects:
    post:
      tags: [render]
      operationId: drawRects
      summary: Draw multiple rects
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [window_id, rects, color], properties: { window_id: { type: integer }, rects: { type: array, items: { $ref: '#/components/schemas/Rect' } }, color: { $ref: '#/components/schemas/Color' } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }

  /agent/audio/devices:
    post:
      tags: [audio]
      operationId: audioDevices
      summary: List audio devices for playback or recording
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [kind], properties: { kind: { type: string, enum: [playback,recording] } } } } }
      responses:
        "200": { description: Devices, content: { application/json: { schema: { type: object, properties: { devices: { type: array, items: { $ref: '#/components/schemas/AudioDeviceInfo' } } } } } } }
  /agent/audio/capture/open:
    post:
      tags: [audio]
      operationId: audioCaptureOpen
      summary: Open default or specified input device
      requestBody:
        required: false
        content: { application/json: { schema: { type: object, properties: { sample_rate: { type: integer }, channels: { type: integer }, format: { $ref: '#/components/schemas/AudioFormat' }, device_id: { type: integer, format: int64, nullable: true } } } } }
      responses:
        "200": { description: Opened, content: { application/json: { schema: { type: object, properties: { audio_id: { type: integer } } } } } }
  /agent/audio/capture/read:
    post:
      tags: [audio]
      operationId: audioCaptureRead
      summary: Read up to N frames from capture
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [audio_id, frames], properties: { audio_id: { type: integer }, frames: { type: integer } } } } }
      responses:
        "200": { description: Frames, content: { application/json: { schema: { $ref: '#/components/schemas/AudioFrames' } } } }
  /agent/audio/playback/open:
    post:
      tags: [audio]
      operationId: audioPlaybackOpen
      summary: Open default or specified output device
      requestBody:
        required: false
        content: { application/json: { schema: { type: object, properties: { sample_rate: { type: integer }, channels: { type: integer }, format: { $ref: '#/components/schemas/AudioFormat' }, device_id: { type: integer, format: int64, nullable: true } } } } }
      responses:
        "200": { description: Opened, content: { application/json: { schema: { type: object, properties: { playback_id: { type: integer } } } } } }
  /agent/audio/playback/sine:
    post:
      tags: [audio]
      operationId: audioPlaybackSine
      summary: Enqueue a generated sine tone
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [playback_id,frequency,seconds], properties: { playback_id: { type: integer }, frequency: { type: number, format: double }, amplitude: { type: number, format: double, default: 0.2 }, seconds: { type: number, format: double } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }
  /agent/audio/playback/queue/open:
    post:
      tags: [audio]
      operationId: audioPlaybackQueueOpen
      summary: Open a buffered queue writer for playback
      requestBody: { required: true, content: { application/json: { schema: { type: object, required: [playback_id], properties: { playback_id: { type: integer }, capacity_frames: { type: integer, default: 48000 }, chunk_frames: { type: integer, default: 2048 } } } } } }
      responses: { "200": { description: Queue, content: { application/json: { schema: { type: object, properties: { queue_id: { type: integer } } } } } } }
  /agent/audio/playback/queue/enqueue:
    post:
      tags: [audio]
      operationId: audioPlaybackQueueEnqueue
      summary: Enqueue PCM for playback queue (f32 interleaved)
      requestBody: { required: true, content: { application/json: { schema: { type: object, required: [queue_id, pcm_base64], properties: { queue_id: { type: integer }, pcm_base64: { type: string, format: byte } } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }
  /agent/audio/playback/play_wav:
    post:
      tags: [audio]
      operationId: audioPlaybackPlayWAV
      summary: Load and play a WAV file through the playback device
      requestBody: { required: true, content: { application/json: { schema: { type: object, required: [playback_id,path], properties: { playback_id: { type: integer }, path: { type: string } } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }
  /agent/audio/monitor/start:
    post:
      tags: [audio]
      operationId: audioMonitorStart
      summary: Start capture→playback monitoring
      requestBody: { required: true, content: { application/json: { schema: { type: object, required: [audio_id,playback_id], properties: { audio_id: { type: integer }, playback_id: { type: integer }, chunk_frames: { type: integer, default: 1024 } } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }
  /agent/audio/monitor/stop:
    post:
      tags: [audio]
      operationId: audioMonitorStop
      summary: Stop monitoring
      requestBody: { required: true, content: { application/json: { schema: { type: object, required: [audio_id], properties: { audio_id: { type: integer } } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }

  /agent/midi/start:
    post:
      tags: [midi]
      operationId: midiStart
      summary: Start MIDI output (macOS)
      requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { midi1: { type: boolean, default: true } } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }
  /agent/midi/stop:
    post:
      tags: [midi]
      operationId: midiStop
      summary: Stop MIDI output (macOS)
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }
  /agent/midi/destinations:
    post:
      tags: [midi]
      operationId: midiDestinations
      summary: List MIDI destinations
      responses: { "200": { description: Names, content: { application/json: { schema: { type: object, properties: { destinations: { type: array, items: { type: string } } } } } } } }
  /agent/midi/select:
    post:
      tags: [midi]
      operationId: midiSelect
      summary: Select MIDI destination by index
      requestBody: { required: true, content: { application/json: { schema: { type: object, required: [index], properties: { index: { type: integer } } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }
  /agent/midi/selectByName:
    post:
      tags: [midi]
      operationId: midiSelectByName
      summary: Select MIDI destination by name
      requestBody: { required: true, content: { application/json: { schema: { type: object, required: [name], properties: { name: { type: string } } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }
  /agent/midi/channel:
    post:
      tags: [midi]
      operationId: midiChannel
      summary: Set MIDI channel
      requestBody: { required: true, content: { application/json: { schema: { type: object, required: [channel], properties: { channel: { type: integer } } } } } }
      responses: { "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } } }

  /health:
    get:
      tags: [health]
      operationId: health
      summary: Health check
      responses:
        "200": { description: Ok, content: { application/json: { schema: { $ref: '#/components/schemas/Ok' } } } }
  /version:
    get:
      tags: [health]
      operationId: version
      summary: Return version string
      responses:
        "200":
          description: Version string
          content:
            application/json:
              schema:
                type: object
                properties:
                  version: { type: string }
    KeyboardState:
      type: object
      properties:
        modMask: { type: integer, format: int32 }
    MouseState:
      type: object
      properties:
        x: { type: integer }
        y: { type: integer }
        buttons: { type: integer, format: int32 }
    DisplayInfo:
      type: object
      properties:
        name: { type: string }
        x: { type: integer }
        y: { type: integer }
        width: { type: integer }
        height: { type: integer }
    Event:
      type: object
      properties:
        type: { type: string, enum: [none,key_down,key_up,mouse_down,mouse_up,mouse_move,quit,window_closed] }
        x: { type: integer, nullable: true }
        y: { type: integer, nullable: true }
        keycode: { type: integer, nullable: true }
        button: { type: integer, nullable: true }
    AudioFormat:
      type: string
      enum: [f32,s16]
    AudioSpec:
      type: object
      properties:
        sample_rate: { type: integer }
        channels: { type: integer }
        format: { $ref: '#/components/schemas/AudioFormat' }
    AudioDeviceInfo:
      type: object
      properties:
        id: { type: integer, format: int64 }
        kind: { type: string, enum: [playback,recording] }
        name: { type: string }
        preferred: { $ref: '#/components/schemas/AudioSpec' }
        bufferFrames: { type: integer }
    AudioFrames:
      type: object
      properties:
        frames: { type: integer }
        pcm_base64: { type: string, format: byte, description: 'f32 interleaved' }
