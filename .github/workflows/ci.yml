name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

defaults:
  run:
    shell: bash

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        swift: [ '6.1-jammy' ]
    container:
      image: swift:${{ matrix.swift }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build tools
        run: |
          apt-get update
          apt-get install -y --no-install-recommends git cmake ninja-build pkg-config ca-certificates
      - name: Install Linux build dependencies
        run: |
          apt-get install -y --no-install-recommends \
            libdrm-dev libgbm-dev libdbus-1-dev libibus-1.0-dev \
            liburing-dev libunwind-dev libgl1-mesa-dev
      - name: Install or provision SDL3
        run: |
          set -exo pipefail
          # Ensure PKG_CONFIG_PATH has a sane default within this step
          export PKG_CONFIG_PATH="${PKG_CONFIG_PATH:-/usr/lib/pkgconfig:/usr/share/pkgconfig}"
          if pkg-config --exists sdl3; then
            echo "SDL3 found via pkg-config"
          else
            if apt-get install -y --no-install-recommends libsdl3-dev; then
              echo "Installed libsdl3-dev from apt"
            else
              echo "libsdl3-dev not available; building SDL fork (console mode)"
              git clone --depth 1 https://github.com/Fountain-Coach/SDL.git SDL-fork
              cmake -S SDL-fork -B SDL-fork/build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/local \
                -DSDL_TESTS=OFF -DSDL_INSTALL_TESTS=OFF \
                -DSDL_SHARED=ON -DSDL_STATIC=OFF \
                -DSDL_UNIX_CONSOLE_BUILD=ON \
                -G Ninja
              cmake --build SDL-fork/build --target install
              # Make sure the linker can resolve -lSDL3 even if only a SONAME exists
              PREFIX="${{ github.workspace }}/local"
              # Detect actual lib directory (handles lib, lib64, or multiarch)
              LIBDIR="$PREFIX/lib"
              if [[ ! -d "$LIBDIR" || -z $(ls -A "$LIBDIR" 2>/dev/null) ]]; then
                LIBDIR=$(dirname "$(find "$PREFIX" -type f -name 'libSDL3*.so*' -print -quit || echo "$PREFIX/lib")")
              fi
              mkdir -p "$LIBDIR"
              # If we have a SONAME but no devel symlink, create libSDL3.so
              CANDIDATE=$(find "$LIBDIR" -maxdepth 1 -type f -name 'libSDL3*.so*' -print | head -n1 || true)
              if [[ -n "$CANDIDATE" && ! -f "$LIBDIR/libSDL3.so" ]]; then
                ln -s "$(basename "$CANDIDATE")" "$LIBDIR/libSDL3.so"
              fi
              echo "Resolved SDL3 lib dir: $LIBDIR"
              echo "PKG_CONFIG_PATH=${{ github.workspace }}/local/lib/pkgconfig:${PKG_CONFIG_PATH:-}" >> $GITHUB_ENV
              echo "SDL3_INCLUDE_DIR=${{ github.workspace }}/local/include" >> $GITHUB_ENV
              echo "SDL3_LIB_DIR=$LIBDIR" >> $GITHUB_ENV
              echo "LD_LIBRARY_PATH=$LIBDIR:${LD_LIBRARY_PATH:-}" >> $GITHUB_ENV
            fi
          fi
      - name: Cache Swift build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .build
            /github/home/.swiftpm
          key: ${{ runner.os }}-swift-${{ matrix.swift }}-build-${{ hashFiles('Package.swift', 'Sources/**', 'Tests/**') }}
          restore-keys: |
            ${{ runner.os }}-swift-${{ matrix.swift }}-build-

      # Build SDL fork with minimal features into a local prefix (no sudo)
      - name: Build and test
        env:
          SDLKIT_GUI_ENABLED: 'false'
          SDL3_INCLUDE_DIR: ${{ env.SDL3_INCLUDE_DIR }}
          SDL3_LIB_DIR: ${{ env.SDL3_LIB_DIR }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}
          CPATH: ${{ env.SDL3_INCLUDE_DIR }}:${{ env.SDL3_INCLUDE_DIR }}/SDL3:${{ env.CPATH }}
          LIBRARY_PATH: ${{ env.SDL3_LIB_DIR }}:${{ env.LIBRARY_PATH }}
        run: |
          # Pass explicit include/lib flags to ensure module importer finds SDL3
          EXTRA_CC=()
          if [[ -n "${SDL3_INCLUDE_DIR}" ]]; then
            EXTRA_CC+=( -Xcc -I"${SDL3_INCLUDE_DIR}" -Xcc -I"${SDL3_INCLUDE_DIR}/SDL3" )
          fi
          EXTRA_LINK=()
          if [[ -n "${SDL3_LIB_DIR}" ]]; then
            EXTRA_LINK+=( -Xlinker -L"${SDL3_LIB_DIR}" )
            EXTRA_LINK+=( -Xlinker -rpath -Xlinker "${SDL3_LIB_DIR}" )
          fi
          swift build -v ${EXTRA_CC[@]} ${EXTRA_LINK[@]}
          swift test -v ${EXTRA_CC[@]} ${EXTRA_LINK[@]}
