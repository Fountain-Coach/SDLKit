name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

defaults:
  run:
    shell: bash

jobs:
  linux:
    runs-on: ubuntu-latest
    container:
      image: swift:6.1-jammy
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Vulkan SDK components
        run: |
          set -euo pipefail
          apt-get update
          apt-get install -y --no-install-recommends \
            libvulkan1 \
            libvulkan-dev \
            vulkan-utils \
            vulkan-validationlayers \
            spirv-tools \
            glslang-tools
          rm -rf /var/lib/apt/lists/*

      # No SDL provisioning needed for headless tests
      - name: Prepare build env (headless)
        run: |
          echo "Preparing headless CI build (no SDL install)"
      - name: Cache Swift build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .build
            /github/home/.swiftpm
          key: ${{ runner.os }}-swift-6.1-jammy-build-${{ hashFiles('Package.swift', 'Sources/**', 'Tests/**') }}
          restore-keys: |
            ${{ runner.os }}-swift-6.1-jammy-build-

      - name: Cache shader artifacts
        uses: actions/cache@v4
        with:
          path: Sources/SDLKit/Generated
          key: ${{ runner.os }}-shader-${{ hashFiles('Shaders/**', 'Plugins/ShaderBuildPlugin/**', 'Scripts/ShaderBuild/**') }}
          restore-keys: |
            ${{ runner.os }}-shader-

      - name: Build shader bundle (best effort)
        run: |
          python3 Scripts/ShaderBuild/build-shaders.py "$PWD" .build/shader-cache
        continue-on-error: true

      - name: Build and test (with retry)
        env:
          SDLKIT_GUI_ENABLED: 'false'
          SDLKIT_VK_VALIDATION_CAPTURE: '1'
          SDLKIT_VK_VALIDATION: '1'
          VK_INSTANCE_LAYERS: VK_LAYER_KHRONOS_validation
        run: |
          set -euo pipefail
          swift build -v -Xswiftc -DHEADLESS_CI
          log_dir="${{ runner.temp }}/vulkan-validation"
          mkdir -p "$log_dir"
          test_log="$log_dir/linux-swift-test.log"
          : > "$test_log"
          attempt=1
          max_attempts=3
          backoff=5
          while [ $attempt -le $max_attempts ]; do
            echo "Linux test attempt $attempt/$max_attempts" | tee -a "$test_log"
            if swift test -v -Xswiftc -DHEADLESS_CI 2>&1 | tee -a "$test_log"; then
              break
            fi
            if [ $attempt -eq $max_attempts ]; then
              echo "Tests failed after $max_attempts attempts"
              exit 1
            fi
            sleep $((backoff * attempt))
            attempt=$((attempt + 1))
          done

      - name: Upload Vulkan validation logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linux-vulkan-validation-logs
          path: ${{ runner.temp }}/vulkan-validation

  windows:
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: '6.0.2'

      - name: Build and test (with retry)
        shell: pwsh
        env:
          SDLKIT_GUI_ENABLED: 'false'
        run: |
          $ErrorActionPreference = 'Stop'
          swift build -v -Xswiftc -DHEADLESS_CI
          $attempt = 1
          $maxAttempts = 3
          $backoff = 5
          while ($attempt -le $maxAttempts) {
            Write-Host "Windows test attempt $attempt/$maxAttempts"
            try {
              swift test -v -Xswiftc -DHEADLESS_CI
              break
            } catch {
              if ($attempt -eq $maxAttempts) {
                throw
              }
              $sleep = $backoff * $attempt
              Start-Sleep -Seconds $sleep
            }
            $attempt++
          }
