openapi: 3.1.0
info:
  title: SDLKit GUI Agent API
  version: 1.0.0
  description: |
    Source-of-truth OpenAPI for the SDLKit GUI Agent.
    Agent protocol version: sdlkit.gui.v1
servers:
  - url: http://localhost:8080
paths:
  /health:
    get:
      summary: Health check
      description: Returns ok true to indicate the agent is responding.
      operationId: health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
  /version:
    get:
      summary: Agent and spec version
      description: Returns the agent protocol version and the OpenAPI spec version served by this instance.
      operationId: version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  agent: { type: string }
                  openapi: { type: string }
                required: [agent, openapi]
  /agent/gui/window/open:
    post:
      summary: Open a window
      description: Creates a new window and returns its window_id.
      operationId: openWindow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenWindowRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenWindowResponse'
        '400': { $ref: '#/components/responses/Error' }
  /agent/gui/window/close:
    post:
      summary: Close a window
      description: Closes the specified window and releases its resources.
      operationId: closeWindow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '400': { $ref: '#/components/responses/Error' }
  /agent/gui/window/show:
    post:
      summary: Show a window
      description: Makes a hidden window visible on screen.
      operationId: showWindow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/hide:
    post:
      summary: Hide a window
      description: Hides a window without destroying it; rendering can continue.
      operationId: hideWindow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/resize:
    post:
      summary: Resize a window
      description: Changes the window size to the requested width and height.
      operationId: resizeWindow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                width: { type: integer, minimum: 1 }
                height: { type: integer, minimum: 1 }
              required: [window_id, width, height]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/setTitle:
    post:
      summary: Set window title
      description: Updates the title displayed in the window’s title bar.
      operationId: setTitle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                title: { type: string }
              required: [window_id, title]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/setPosition:
    post:
      summary: Move a window
      description: Moves the window to the given screen coordinates.
      operationId: setPosition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                x: { type: integer }
                y: { type: integer }
              required: [window_id, x, y]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/maximize:
    post:
      summary: Maximize window
      description: Maximizes the window according to the platform’s window manager.
      operationId: maximize
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/minimize:
    post:
      summary: Minimize window
      description: Minimizes the window to the task bar or dock, depending on platform.
      operationId: minimize
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/restore:
    post:
      summary: Restore window
      description: Restores a minimized or maximized window to its normal size.
      operationId: restore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/setFullscreen:
    post:
      summary: Toggle fullscreen
      description: Enables or disables fullscreen mode for the window.
      operationId: setFullscreen
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                enabled: { type: boolean }
              required: [window_id, enabled]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/setAlwaysOnTop:
    post:
      summary: Toggle always-on-top
      description: Enables or disables always-on-top for the window above other windows.
      operationId: setAlwaysOnTop
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                enabled: { type: boolean }
              required: [window_id, enabled]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/setOpacity:
    post:
      summary: Set window opacity
      description: Sets the window’s opacity between 0.0 (transparent) and 1.0 (opaque).
      operationId: setOpacity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                opacity: { type: number, minimum: 0.0, maximum: 1.0 }
              required: [window_id, opacity]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/center:
    post:
      summary: Center window
      description: Centers the window on the primary display.
      operationId: center
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/window/getInfo:
    post:
      summary: Get window info
      description: Returns window position, size, and title for the specified window.
      operationId: getWindowInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WindowInfo'
  /agent/gui/clear:
    post:
      summary: Clear with color
      description: Clears the current render target to the given color.
      operationId: clear
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColorRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/present:
    post:
      summary: Present
      description: Presents any pending draw commands to the display according to the present policy.
      operationId: present
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/render/getOutputSize:
    post:
      summary: Query render output size
      description: Returns the size of the renderer’s current output in pixels.
      operationId: renderGetOutputSize
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowOnlyRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: { width: {type: integer}, height: {type: integer} }
  /agent/gui/render/getScale:
    post:
      summary: Query render scale
      description: Returns the current render scale factors (sx, sy).
      operationId: renderGetScale
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowOnlyRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: { sx: {type: number}, sy: {type: number} }
  /agent/gui/render/setScale:
    post:
      summary: Set render scale
      description: Sets the render scale factors (sx, sy) for subsequent draw operations.
      operationId: renderSetScale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                sx: { type: number }
                sy: { type: number }
              required: [window_id, sx, sy]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/render/getDrawColor:
    post:
      summary: Query draw color
      description: Returns the current draw color used by primitive operations.
      operationId: renderGetDrawColor
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowOnlyRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: { color: { type: integer, description: ARGB 0xAARRGGBB } }
  /agent/gui/render/setDrawColor:
    post:
      summary: Set draw color
      description: Sets the renderer’s draw color for subsequent primitive operations.
      operationId: renderSetDrawColor
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ColorRequest' }
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/render/getViewport:
    post:
      summary: Query viewport
      description: Returns the renderer’s current viewport rectangle.
      operationId: renderGetViewport
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowOnlyRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: { x: {type: integer}, y: {type: integer}, width: {type: integer}, height: {type: integer} }
  /agent/gui/render/setViewport:
    post:
      summary: Set viewport
      description: Sets the renderer’s viewport rectangle.
      operationId: renderSetViewport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                x: { type: integer }
                y: { type: integer }
                width: { type: integer }
                height: { type: integer }
              required: [window_id, x, y, width, height]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/render/getClipRect:
    post:
      summary: Query clip rect
      description: Returns the current clip rectangle; drawing outside it is clipped.
      operationId: renderGetClipRect
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowOnlyRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: { x: {type: integer}, y: {type: integer}, width: {type: integer}, height: {type: integer} }
  /agent/gui/render/setClipRect:
    post:
      summary: Set clip rect
      description: Sets the renderer’s clip rectangle.
      operationId: renderSetClipRect
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                x: { type: integer }
                y: { type: integer }
                width: { type: integer }
                height: { type: integer }
              required: [window_id, x, y, width, height]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/render/disableClipRect:
    post:
      summary: Disable clip rect
      description: Disables clipping; subsequent draws are not clipped.
      operationId: renderDisableClipRect
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WindowOnlyRequest' }
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/drawRectangle:
    post:
      summary: Draw filled rectangle
      description: Draws a filled rectangle with the given color at the specified position.
      operationId: drawRectangle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RectRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/drawLine:
    post:
      summary: Draw line
      description: Draws a straight line between two points using the current draw color.
      operationId: drawLine
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LineRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/drawCircleFilled:
    post:
      summary: Draw filled circle
      description: Draws a filled circle using software rasterization.
      operationId: drawCircleFilled
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CircleRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/drawText:
    post:
      summary: Draw text (SDL_ttf)
      description: Renders UTF‑8 text to the renderer using a TrueType font when SDL_ttf is available.
      operationId: drawText
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextRequest'
      responses:
        '200': { $ref: '#/components/responses/Ok' }
        '400': { $ref: '#/components/responses/Error' }
  /agent/gui/captureEvent:
    post:
      summary: Capture input event
      description: Polls or waits for an input event and returns it if available.
      operationId: captureEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptureEventRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: '#/components/schemas/Event'
  /agent/gui/clipboard/get:
    post:
      summary: Get clipboard text
      description: Reads the current clipboard text.
      operationId: clipboardGet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  text: { type: string }
  /agent/gui/clipboard/set:
    post:
      summary: Set clipboard text
      description: Writes the given text to the clipboard.
      operationId: clipboardSet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                text: { type: string }
              required: [window_id, text]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/input/getKeyboardState:
    post:
      summary: Get keyboard modifiers
      description: Returns the current state of modifier keys (shift, ctrl, alt, gui).
      operationId: getKeyboardState
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  modifiers:
                    type: object
                    properties:
                      shift: { type: boolean }
                      ctrl: { type: boolean }
                      alt: { type: boolean }
                      gui: { type: boolean }
  /agent/gui/input/getMouseState:
    post:
      summary: Get mouse state
      description: Returns the current mouse position and pressed buttons.
      operationId: getMouseState
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  x: { type: integer }
                  y: { type: integer }
                  buttons: { type: array, items: { type: integer } }
  /agent/gui/display/list:
    get:
      summary: List displays
      description: Returns the available video displays and their names.
      operationId: listDisplays
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  displays:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        name: { type: string }
  /agent/gui/display/getInfo:
    post:
      summary: Get display bounds
      description: Returns the pixel bounds of a display by index.
      operationId: getDisplayInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                index: { type: integer, minimum: 0 }
              required: [index]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  bounds:
                    type: object
                    properties: { x: {type: integer}, y: {type: integer}, width: {type: integer}, height: {type: integer} }
  /agent/gui/texture/load:
    post:
      summary: Load texture
      description: Loads a texture from disk (BMP or common formats when SDL_image is present) and assigns a logical id.
      operationId: textureLoad
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                id: { type: string, description: logical texture id }
                path: { type: string }
              required: [window_id, id, path]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/texture/draw:
    post:
      summary: Draw texture
      description: Draws a previously loaded texture at a position; optional scaling via width/height.
      operationId: textureDraw
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                id: { type: string }
                x: { type: integer }
                y: { type: integer }
                width: { type: integer, nullable: true }
                height: { type: integer, nullable: true }
              required: [window_id, id, x, y]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/texture/free:
    post:
      summary: Free texture
      description: Releases a previously loaded texture by id.
      operationId: textureFree
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                id: { type: string }
              required: [window_id, id]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/screenshot/capture:
    post:
      operationId: screenshotCapture
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindowOnlyRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  raw_base64: { type: string, description: ABGR8888 pixel data, row-major }
                  width: { type: integer }
                  height: { type: integer }
                  pitch: { type: integer }
                  format: { type: string, enum: [ABGR8888] }
components:
  responses:
    Ok:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OkResponse'
    Error:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    OkResponse:
      type: object
      properties:
        ok: { type: boolean }
      required: [ok]
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            details: { type: string, nullable: true }
          required: [code]
      required: [error]
    WindowOnlyRequest:
      type: object
      properties:
        window_id: { type: integer, minimum: 1 }
      required: [window_id]
    OpenWindowRequest:
      type: object
      properties:
        title: { type: string }
        width: { type: integer, minimum: 1 }
        height: { type: integer, minimum: 1 }
      required: [title, width, height]
    OpenWindowResponse:
      type: object
      properties:
        window_id: { type: integer, minimum: 1 }
      required: [window_id]
    WindowInfo:
      type: object
      properties:
        window_id: { type: integer, minimum: 1 }
        x: { type: integer }
        y: { type: integer }
        width: { type: integer }
        height: { type: integer }
        title: { type: string }
      required: [window_id, x, y, width, height, title]
    Color:
      oneOf:
        - type: string
          description: CSS color name or hex (#RRGGBB or #AARRGGBB)
        - type: integer
          description: ARGB as 0xAARRGGBB
    ColorRequest:
      type: object
      properties:
        window_id: { type: integer, minimum: 1 }
        color: { $ref: '#/components/schemas/Color' }
      required: [window_id, color]
    RectRequest:
      type: object
      properties:
        window_id: { type: integer, minimum: 1 }
        x: { type: integer }
        y: { type: integer }
        width: { type: integer, minimum: 1 }
        height: { type: integer, minimum: 1 }
        color: { $ref: '#/components/schemas/Color' }
      required: [window_id, x, y, width, height, color]
    LineRequest:
      type: object
      properties:
        window_id: { type: integer, minimum: 1 }
        x1: { type: integer }
        y1: { type: integer }
        x2: { type: integer }
        y2: { type: integer }
        color: { $ref: '#/components/schemas/Color' }
      required: [window_id, x1, y1, x2, y2, color]
    CircleRequest:
      type: object
      properties:
        window_id: { type: integer, minimum: 1 }
        cx: { type: integer }
        cy: { type: integer }
        radius: { type: integer, minimum: 0 }
        color: { $ref: '#/components/schemas/Color' }
      required: [window_id, cx, cy, radius, color]
    TextRequest:
      type: object
      properties:
        window_id: { type: integer, minimum: 1 }
        text: { type: string }
        x: { type: integer }
        y: { type: integer }
        font: { type: string, nullable: true, description: 'file path, system:default, or name:<id>' }
        size: { type: integer, minimum: 1, nullable: true }
        color:
          type: integer
          description: ARGB as 0xAARRGGBB (optional; default white)
          nullable: true
      required: [window_id, text, x, y]
    CaptureEventRequest:
      type: object
      properties:
        window_id: { type: integer, minimum: 1 }
        timeout_ms: { type: integer, minimum: 0, nullable: true }
      required: [window_id]
    Event:
      type: object
      properties:
        type:
          type: string
          enum: [key_down, key_up, mouse_down, mouse_up, mouse_move, quit, window_closed]
        x: { type: integer, nullable: true }
        y: { type: integer, nullable: true }
        key: { type: string, nullable: true }
        button: { type: integer, nullable: true }
      required: [type]
  /agent/gui/texture/drawTiled:
    post:
      summary: Draw tiled texture
      description: Fills a region by repeating a texture in a tile grid.
      operationId: textureDrawTiled
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                id: { type: string }
                x: { type: integer }
                y: { type: integer }
                width: { type: integer }
                height: { type: integer }
                tileWidth: { type: integer, minimum: 1 }
                tileHeight: { type: integer, minimum: 1 }
              required: [window_id, id, x, y, width, height, tileWidth, tileHeight]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
  /agent/gui/texture/drawRotated:
    post:
      summary: Draw rotated texture
      description: Draws a texture rotated by an angle (degrees) around an optional center.
      operationId: textureDrawRotated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                window_id: { type: integer, minimum: 1 }
                id: { type: string }
                x: { type: integer }
                y: { type: integer }
                width: { type: integer, nullable: true }
                height: { type: integer, nullable: true }
                angle: { type: number, description: degrees }
                cx: { type: number, nullable: true, description: rotation center X }
                cy: { type: number, nullable: true, description: rotation center Y }
              required: [window_id, id, x, y, angle]
      responses:
        '200': { $ref: '#/components/responses/Ok' }
